/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: wrapper.i

package rules_cgo

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef long long swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
extern void _wrap_Swig_free_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_rules_cgo_48a7fe3441646a9b(swig_intgo arg1);
extern swig_intgo _wrap_MIN_PROJECT_SIZE_get_rules_cgo_48a7fe3441646a9b(void);
extern void _wrap_Result_solution_set_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_Result_solution_get_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern void _wrap_Result_bestCountSolution_set_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_Result_bestCountSolution_get_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern uintptr_t _wrap_new_Result_rules_cgo_48a7fe3441646a9b(void);
extern void _wrap_delete_Result_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern uintptr_t _wrap_packSolution_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_GetSolution_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, swig_intgo arg2);
extern uintptr_t _wrap_new_IntVector__SWIG_0_rules_cgo_48a7fe3441646a9b(void);
extern uintptr_t _wrap_new_IntVector__SWIG_1_rules_cgo_48a7fe3441646a9b(swig_type_1 arg1);
extern uintptr_t _wrap_new_IntVector__SWIG_2_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern swig_type_2 _wrap_IntVector_size_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern swig_type_3 _wrap_IntVector_capacity_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern void _wrap_IntVector_reserve_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, swig_type_4 arg2);
extern _Bool _wrap_IntVector_isEmpty_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern void _wrap_IntVector_clear_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
extern void _wrap_IntVector_add_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_IntVector_get_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_IntVector_set_rules_cgo_48a7fe3441646a9b(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3);
extern void _wrap_delete_IntVector_rules_cgo_48a7fe3441646a9b(uintptr_t arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_rules_cgo_48a7fe3441646a9b(C.swig_intgo(_swig_i_0)))
	return swig_r
}

func GetMIN_PROJECT_SIZE() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_MIN_PROJECT_SIZE_get_rules_cgo_48a7fe3441646a9b())
	return swig_r
}

type SwigcptrResult uintptr

func (p SwigcptrResult) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrResult) SwigIsResult() {
}

func (arg1 SwigcptrResult) SetSolution(arg2 IntVector) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_Result_solution_set_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrResult) GetSolution() (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_Result_solution_get_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrResult) SetBestCountSolution(arg2 IntVector) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_Result_bestCountSolution_set_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrResult) GetBestCountSolution() (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_Result_bestCountSolution_get_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewResult() (_swig_ret Result) {
	var swig_r Result
	swig_r = (Result)(SwigcptrResult(C._wrap_new_Result_rules_cgo_48a7fe3441646a9b()))
	return swig_r
}

func DeleteResult(arg1 Result) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Result_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))
}

type Result interface {
	Swigcptr() uintptr
	SwigIsResult()
	SetSolution(arg2 IntVector)
	GetSolution() (_swig_ret IntVector)
	SetBestCountSolution(arg2 IntVector)
	GetBestCountSolution() (_swig_ret IntVector)
}

func PackSolution(arg1 OKey_Solution, arg2 OKey_Deck) (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_packSolution_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))))
	return swig_r
}

func GetSolution(arg1 IntVector, arg2 int) (_swig_ret Result) {
	var swig_r Result
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (Result)(SwigcptrResult(C._wrap_GetSolution_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))))
	return swig_r
}

type SwigcptrIntVector uintptr

func (p SwigcptrIntVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrIntVector) SwigIsIntVector() {
}

func NewIntVector__SWIG_0() (_swig_ret IntVector) {
	var swig_r IntVector
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_new_IntVector__SWIG_0_rules_cgo_48a7fe3441646a9b()))
	return swig_r
}

func NewIntVector__SWIG_1(arg1 int64) (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_new_IntVector__SWIG_1_rules_cgo_48a7fe3441646a9b(C.swig_type_1(_swig_i_0))))
	return swig_r
}

func NewIntVector__SWIG_2(arg1 IntVector) (_swig_ret IntVector) {
	var swig_r IntVector
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (IntVector)(SwigcptrIntVector(C._wrap_new_IntVector__SWIG_2_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewIntVector(a ...interface{}) IntVector {
	argc := len(a)
	if argc == 0 {
		return NewIntVector__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewIntVector__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewIntVector__SWIG_2(a[0].(IntVector))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrIntVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_IntVector_size_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_IntVector_capacity_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_IntVector_reserve_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.swig_type_4(_swig_i_1))
}

func (arg1 SwigcptrIntVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_IntVector_isEmpty_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_IntVector_clear_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrIntVector) Add(arg2 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_IntVector_add_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrIntVector) Get(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_IntVector_get_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrIntVector) Set(arg2 int, arg3 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_IntVector_set_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2))
}

func DeleteIntVector(arg1 IntVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_IntVector_rules_cgo_48a7fe3441646a9b(C.uintptr_t(_swig_i_0))
}

type IntVector interface {
	Swigcptr() uintptr
	SwigIsIntVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 int)
	Get(arg2 int) (_swig_ret int)
	Set(arg2 int, arg3 int)
}


type SwigcptrOKey_Solution uintptr
type OKey_Solution interface {
	Swigcptr() uintptr;
}
func (p SwigcptrOKey_Solution) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrOKey_Deck uintptr
type OKey_Deck interface {
	Swigcptr() uintptr;
}
func (p SwigcptrOKey_Deck) Swigcptr() uintptr {
	return uintptr(p)
}

