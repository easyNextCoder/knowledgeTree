1. 中断向量号的划分和使用
在IDT表中：
0-19号是CPU已经写死的中断和异常向量号，我么做异常的时候不要对其进行覆盖
48号是由操作系统编写者定义的系统中断异常的向量号
硬件中断的向量号定义的是：IRQ_OFFSET+IRQ_...

2.  如何处理这些中断和异常？

首先建立一个中断和异常表比如256个中断表(中断描述符表)->将表的地址放到IDTR中
>https://blog.csdn.net/zat111/article/details/36420903

jos这样进行总体处理的：由于系统要求每个中断或者异常有对应的处理函数和优先级，但是如果写成函数不利于总体去处理，所以用宏建立一个函数名对应中断号的汇编函数，然后在汇编函数中利用中断号作为参数去调用trap()函数再去总体处理，这样一来就能够处理所有的中断和异常。


2. 可屏蔽中断


3. 优先级中断


4. 中断和异常的区别？

外中断（中断<异步>）-就是我们指的中断-是指由于外部设备事件所引起的中断，如通常的磁盘中断、打印机中断等。

内中断(异常<同步>)-指由于CPU内部事件所引起的中断，如程序出错（非法指令，地址越界）。内中断也被称为{捕获，或陷入}

中断        来自IO设备，其他硬件设备   异步    总是返回到下一条指令
陷入(trap)  有意识安排                 同步    返回到下一条指令
故障(fault) 可恢复的错误                同步   返回到当前指令
终止(abort)  不可恢复的错误             同步   不会返回
（从以上我们可以看出jos中的page fault 和trap等的逻辑）
https://blog.csdn.net/qq_29996285/article/details/88078939?utm_medium=distribute.pc_relevant_right.none-task-blog-OPENSEARCH-2&depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-OPENSEARCH-2

